global !p
def math():
	inmathzone = """
	let s:mathzones  = '\%(texMathZone\%([A-L]S\?\|[V-Z]\)\|texMathRegion\%(\|Ensured\|Env\|EnvStarred\|X\|XX\)\)'
    let s:textzones = 'texMathText\%(\|Arg\)'
    function! InMathZone()
        let ids   = reverse(map(synstack(line('.'), max([col('.') - 1, 1])), 'synIDattr(v:val, ''name'')'))
        let first = match(ids, '^' . s:mathzones . '\|' . s:textzones . '$')
        return (first >= 0 && match(ids[first], '^' . s:textzones . '$') == -1)
    endfunction
	"""
	vim.command(inmathzone)
	print
	return vim.eval('InMathZone()') == '1'
endglobal

priority 2

snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet


context "math()"
snippet ^ "complement" iA
^{$1}
endsnippet



snippet $ "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet


snippet dm "Math" wA
\[
$1
.\] $0
endsnippet


context "math()"
snippet "([^\w\\])sum" "Sum with upper and lower limit" rA
`!p snip.rv = match.group(1)`\sum_{$1}^{$2} $0
endsnippet


context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet frac "Fraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet
